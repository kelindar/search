//go:build !noasm && amd64
// AUTO-GENERATED BY GOCC -- DO NOT EDIT

TEXT ·f32_cosine_distance(SB), $0-32
	MOVQ x+0(FP), DI
	MOVQ y+8(FP), SI
	MOVQ result+16(FP), DX
	MOVQ size+24(FP), CX
	BYTE $0x55               // push	rbp
	WORD $0x8948; BYTE $0xe5 // mov	rbp, rsp
	LONG $0xf8e48348         // and	rsp, -8
	LONG $0xc957f0c5         // vxorps	xmm1, xmm1, xmm1
	LONG $0xc057f8c5         // vxorps	xmm0, xmm0, xmm0
	LONG $0xd257e8c5         // vxorps	xmm2, xmm2, xmm2
	LONG $0xe457d8c5         // vxorps	xmm4, xmm4, xmm4
	WORD $0x8548; BYTE $0xc9 // test	rcx, rcx
	JE   LBB0_8
	LONG $0x10f98348         // cmp	rcx, 16
	JAE  LBB0_4
	LONG $0xdb57e0c5         // vxorps	xmm3, xmm3, xmm3
	WORD $0x3145; BYTE $0xc0 // xor	r8d, r8d
	LONG $0xe457d8c5         // vxorps	xmm4, xmm4, xmm4
	LONG $0xd257e8c5         // vxorps	xmm2, xmm2, xmm2
	JMP  LBB0_3

LBB0_4:
	WORD $0x8949; BYTE $0xc8 // mov	r8, rcx
	LONG $0xf0e08349         // and	r8, -16
	LONG $0xdb57e0c5         // vxorps	xmm3, xmm3, xmm3
	WORD $0xc031             // xor	eax, eax
	LONG $0xed57d0c5         // vxorps	xmm5, xmm5, xmm5
	LONG $0xe457d8c5         // vxorps	xmm4, xmm4, xmm4
	LONG $0xf657c8c5         // vxorps	xmm6, xmm6, xmm6
	LONG $0xd257e8c5         // vxorps	xmm2, xmm2, xmm2
	LONG $0xff57c0c5         // vxorps	xmm7, xmm7, xmm7

LBB0_5:
	LONG $0x04107cc5; BYTE $0x87   // vmovups	ymm8, ymmword ptr [rdi + 4*rax]
	LONG $0x4c107cc5; WORD $0x2087 // vmovups	ymm9, ymmword ptr [rdi + 4*rax + 32]
	LONG $0x14107cc5; BYTE $0x86   // vmovups	ymm10, ymmword ptr [rsi + 4*rax]
	LONG $0x5c107cc5; WORD $0x2086 // vmovups	ymm11, ymmword ptr [rsi + 4*rax + 32]
	LONG $0xb82dc2c4; BYTE $0xd8   // vfmadd231ps	ymm3, ymm10, ymm8
	LONG $0xb825c2c4; BYTE $0xe9   // vfmadd231ps	ymm5, ymm11, ymm9
	LONG $0xb83dc2c4; BYTE $0xe0   // vfmadd231ps	ymm4, ymm8, ymm8
	LONG $0xb835c2c4; BYTE $0xf1   // vfmadd231ps	ymm6, ymm9, ymm9
	LONG $0xb82dc2c4; BYTE $0xd2   // vfmadd231ps	ymm2, ymm10, ymm10
	LONG $0xb825c2c4; BYTE $0xfb   // vfmadd231ps	ymm7, ymm11, ymm11
	LONG $0x10c08348               // add	rax, 16
	WORD $0x3949; BYTE $0xc0       // cmp	r8, rax
	JNE  LBB0_5
	LONG $0xd258c4c5               // vaddps	ymm2, ymm7, ymm2
	LONG $0x197de3c4; WORD $0x01d7 // vextractf128	xmm7, ymm2, 1
	LONG $0xd758e8c5               // vaddps	xmm2, xmm2, xmm7
	LONG $0x0579e3c4; WORD $0x01fa // vpermilpd	xmm7, xmm2, 1
	LONG $0xd758e8c5               // vaddps	xmm2, xmm2, xmm7
	LONG $0xfa16fac5               // vmovshdup	xmm7, xmm2
	LONG $0xd758eac5               // vaddss	xmm2, xmm2, xmm7
	LONG $0xe458ccc5               // vaddps	ymm4, ymm6, ymm4
	LONG $0x197de3c4; WORD $0x01e6 // vextractf128	xmm6, ymm4, 1
	LONG $0xe658d8c5               // vaddps	xmm4, xmm4, xmm6
	LONG $0x0579e3c4; WORD $0x01f4 // vpermilpd	xmm6, xmm4, 1
	LONG $0xe658d8c5               // vaddps	xmm4, xmm4, xmm6
	LONG $0xf416fac5               // vmovshdup	xmm6, xmm4
	LONG $0xe658dac5               // vaddss	xmm4, xmm4, xmm6
	LONG $0xdb58d4c5               // vaddps	ymm3, ymm5, ymm3
	LONG $0x197de3c4; WORD $0x01dd // vextractf128	xmm5, ymm3, 1
	LONG $0xdd58e0c5               // vaddps	xmm3, xmm3, xmm5
	LONG $0x0579e3c4; WORD $0x01eb // vpermilpd	xmm5, xmm3, 1
	LONG $0xdd58e0c5               // vaddps	xmm3, xmm3, xmm5
	LONG $0xeb16fac5               // vmovshdup	xmm5, xmm3
	LONG $0xdd58e2c5               // vaddss	xmm3, xmm3, xmm5
	WORD $0x3949; BYTE $0xc8       // cmp	r8, rcx
	JE   LBB0_7

LBB0_3:
	LONG $0x107aa1c4; WORD $0x872c // vmovss	xmm5, dword ptr [rdi + 4*r8]
	LONG $0x107aa1c4; WORD $0x8634 // vmovss	xmm6, dword ptr [rsi + 4*r8]
	LONG $0xb949e2c4; BYTE $0xdd   // vfmadd231ss	xmm3, xmm6, xmm5
	LONG $0xb951e2c4; BYTE $0xe5   // vfmadd231ss	xmm4, xmm5, xmm5
	LONG $0xb949e2c4; BYTE $0xd6   // vfmadd231ss	xmm2, xmm6, xmm6
	WORD $0xff49; BYTE $0xc0       // inc	r8
	WORD $0x394c; BYTE $0xc1       // cmp	rcx, r8
	JNE  LBB0_3

LBB0_7:
	LONG $0xe259dac5 // vmulss	xmm4, xmm4, xmm2
	LONG $0xd35ae2c5 // vcvtss2sd	xmm2, xmm3, xmm3

LBB0_8:
	LONG $0xdc51dac5         // vsqrtss	xmm3, xmm4, xmm4
	LONG $0xd92ef8c5         // vucomiss	xmm3, xmm1
	JNE  LBB0_9
	LONG $0x0211fbc5         // vmovsd	qword ptr [rdx], xmm0
	WORD $0x8948; BYTE $0xec // mov	rsp, rbp
	BYTE $0x5d               // pop	rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret

LBB0_9:
	LONG $0xc35ae2c5         // vcvtss2sd	xmm0, xmm3, xmm3
	LONG $0xc05eebc5         // vdivsd	xmm0, xmm2, xmm0
	LONG $0x0211fbc5         // vmovsd	qword ptr [rdx], xmm0
	WORD $0x8948; BYTE $0xec // mov	rsp, rbp
	BYTE $0x5d               // pop	rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret

TEXT ·f32_dot_product(SB), $0-32
	MOVQ x+0(FP), DI
	MOVQ y+8(FP), SI
	MOVQ result+16(FP), DX
	MOVQ size+24(FP), CX
	BYTE $0x55               // push	rbp
	WORD $0x8948; BYTE $0xe5 // mov	rbp, rsp
	LONG $0xf8e48348         // and	rsp, -8
	WORD $0x8548; BYTE $0xc9 // test	rcx, rcx
	JE   LBB1_1
	LONG $0x20f98348         // cmp	rcx, 32
	JAE  LBB1_5
	LONG $0xc057f8c5         // vxorps	xmm0, xmm0, xmm0
	WORD $0x3145; BYTE $0xc0 // xor	r8d, r8d
	JMP  LBB1_4

LBB1_1:
	LONG $0xc057f8c5         // vxorps	xmm0, xmm0, xmm0
	LONG $0x0211fbc5         // vmovsd	qword ptr [rdx], xmm0
	WORD $0x8948; BYTE $0xec // mov	rsp, rbp
	BYTE $0x5d               // pop	rbp
	BYTE $0xc3               // ret

LBB1_5:
	WORD $0x8949; BYTE $0xc8 // mov	r8, rcx
	LONG $0xe0e08349         // and	r8, -32
	LONG $0xc057f8c5         // vxorps	xmm0, xmm0, xmm0
	WORD $0xc031             // xor	eax, eax
	LONG $0xc957f0c5         // vxorps	xmm1, xmm1, xmm1
	LONG $0xd257e8c5         // vxorps	xmm2, xmm2, xmm2
	LONG $0xdb57e0c5         // vxorps	xmm3, xmm3, xmm3

LBB1_6:
	LONG $0x2410fcc5; BYTE $0x86               // vmovups	ymm4, ymmword ptr [rsi + 4*rax]
	LONG $0x6c10fcc5; WORD $0x2086             // vmovups	ymm5, ymmword ptr [rsi + 4*rax + 32]
	LONG $0x7410fcc5; WORD $0x4086             // vmovups	ymm6, ymmword ptr [rsi + 4*rax + 64]
	LONG $0x7c10fcc5; WORD $0x6086             // vmovups	ymm7, ymmword ptr [rsi + 4*rax + 96]
	LONG $0xb85de2c4; WORD $0x8704             // vfmadd231ps	ymm0, ymm4, ymmword ptr [rdi + 4*rax]
	LONG $0xb855e2c4; WORD $0x874c; BYTE $0x20 // vfmadd231ps	ymm1, ymm5, ymmword ptr [rdi + 4*rax + 32]
	LONG $0xb84de2c4; WORD $0x8754; BYTE $0x40 // vfmadd231ps	ymm2, ymm6, ymmword ptr [rdi + 4*rax + 64]
	LONG $0xb845e2c4; WORD $0x875c; BYTE $0x60 // vfmadd231ps	ymm3, ymm7, ymmword ptr [rdi + 4*rax + 96]
	LONG $0x20c08348                           // add	rax, 32
	WORD $0x3949; BYTE $0xc0                   // cmp	r8, rax
	JNE  LBB1_6
	LONG $0xc058f4c5                           // vaddps	ymm0, ymm1, ymm0
	LONG $0xc058ecc5                           // vaddps	ymm0, ymm2, ymm0
	LONG $0xc058e4c5                           // vaddps	ymm0, ymm3, ymm0
	LONG $0x197de3c4; WORD $0x01c1             // vextractf128	xmm1, ymm0, 1
	LONG $0xc158f8c5                           // vaddps	xmm0, xmm0, xmm1
	LONG $0x0579e3c4; WORD $0x01c8             // vpermilpd	xmm1, xmm0, 1
	LONG $0xc158f8c5                           // vaddps	xmm0, xmm0, xmm1
	LONG $0xc816fac5                           // vmovshdup	xmm1, xmm0
	LONG $0xc158fac5                           // vaddss	xmm0, xmm0, xmm1
	WORD $0x3949; BYTE $0xc8                   // cmp	r8, rcx
	JE   LBB1_8

LBB1_4:
	LONG $0x107aa1c4; WORD $0x860c // vmovss	xmm1, dword ptr [rsi + 4*r8]
	LONG $0xb971a2c4; WORD $0x8704 // vfmadd231ss	xmm0, xmm1, dword ptr [rdi + 4*r8]
	WORD $0xff49; BYTE $0xc0       // inc	r8
	WORD $0x394c; BYTE $0xc1       // cmp	rcx, r8
	JNE  LBB1_4

LBB1_8:
	LONG $0xc05afac5         // vcvtss2sd	xmm0, xmm0, xmm0
	LONG $0x0211fbc5         // vmovsd	qword ptr [rdx], xmm0
	WORD $0x8948; BYTE $0xec // mov	rsp, rbp
	BYTE $0x5d               // pop	rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // ret
